//類別中欄位僅保留基礎量，刪除導出量，節省空間。
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Quiz3
{
    class Program
    {
        static void Main(string[] args)
        {
            Triangle A = new Triangle();
            string S;
            string[] Temp; //字串陣列宣告。
            Temp = new string[2]; //配置記憶體及宣告長度。
            char Keep;
        Repeat:; //重複點。
            Console.WriteLine("=====三角形特性分析====="); //標題，WriteLine自動換行。
            Console.WriteLine("輸入座標點。(以空格分隔)");
            Console.Write("(X1, Y1) = "); //讀入座標，Write不換行。
            S = Console.ReadLine(); //讀入字串。            
            Temp = S.Split(' '); //以空格分割讀入字串。
            A.x1 = double.Parse(Temp[0]); //進行資料轉換。
            A.y1 = double.Parse(Temp[1]);
            Console.Write("(X2, Y2) = ");
            S = Console.ReadLine(); //讀入字串。
            Temp = S.Split(' '); //分割字串。
            A.x2 = double.Parse(Temp[0]);
            A.y2 = double.Parse(Temp[1]);
            Console.Write("(X3, Y3) = ");
            S = Console.ReadLine();
            Temp = S.Split(' ');
            A.x3 = double.Parse(Temp[0]);
            A.y3 = double.Parse(Temp[1]); //讀入結束。
            if (A.Error(A.x1, A.y1, A.x2, A.y2, A.x3, A.y3)) //錯誤判讀。
            {
                Console.WriteLine("此三點無法構成三角形。");
                goto GoOn;
            }
            Console.WriteLine("周長 = {0}", A.LenSum());
            Console.WriteLine("面積 = {0}", A.Area());
            Console.WriteLine("外接圓半徑 = {0}", A.OuterRadius());
            if (A.Right()) Console.WriteLine("是直角三角形。");
            else Console.WriteLine("非直角三角形。");
            GoOn:;
            Console.WriteLine("再次進行驗證？(是：Y / 否：N)");
            Keep = char.Parse(Console.ReadLine());
            switch (Keep)
            {
                case 'Y':
                    Console.Clear();
                    goto Repeat;
                case 'N':
                    break;
                default:
                    Console.WriteLine("Error, ending program.");
                    break;
            }
        }
        class Triangle //類別宣告。
        {
            public double x1;
            public double y1;
            public double x2;
            public double y2;
            public double x3;
            public double y3; //座標點。
            
            public bool Error(double x1, double y1, double x2, double y2, double x3, double y3) //成立判別。
            {
                double A, B;
                A = (y2 - y1) / (x2 - x1);
                B = (y3 - y1) / (x3 - x1);
                if (A == B) return true;
                else return false;
            }

            private double Length(double a, double b, double x, double y) //邊長計算。
            {
                double length;
                double A, B;
                A = a - x;
                B = b - y;
                double s;
                s = A * A + B * B;
                length = Math.Sqrt(s);
                return length;
            }

            public double LenSum() //周長計算。
            {
                double l1 = this.Length(this.x1, this.y1, this.x2, this.y2);
                double l2 = this.Length(this.x2, this.y2, this.x3, this.y3);
                double l3 = this.Length(this.x1, this.y1, this.x3, this.y3);
                double len = l1 + l2 + l3;
                return len;
            }

            public double Area() //面積計算，海龍公式。
            {
                double l1 = this.Length(this.x1, this.y1, this.x2, this.y2);
                double l2 = this.Length(this.x2, this.y2, this.x3, this.y3);
                double l3 = this.Length(this.x1, this.y1, this.x3, this.y3);
                double area;
                double s;
                s = (l1 + l2 + l3) / 2;
                area = s * (s - l1) * (s - l2) * (s - l3);
                area = Math.Sqrt(area);
                return area;
            }

            private double Angle(double l1, double l2, double l3) //角度計算，餘弦定理。
            {
                double angle;
                double s;
                s = l3 * l3 + l2 * l2 - l1 * l1;
                s = s / (2 * l2 * l3);
                angle = Math.Acos(s);
                return angle;
            }

            public double OuterRadius() //角度計算，餘弦定理。
            {
                double l1 = this.Length(this.x1, this.y1, this.x2, this.y2);
                double l2 = this.Length(this.x2, this.y2, this.x3, this.y3);
                double l3 = this.Length(this.x1, this.y1, this.x3, this.y3);
                double radius;
                double s;
                s = l3 * l2 * l1 / 4;
                radius = s / this.Area();
                return radius;
            }

            public bool Right() //直角判別。
            {
                double l1 = this.Length(this.x1, this.y1, this.x2, this.y2);
                double l2 = this.Length(this.x2, this.y2, this.x3, this.y3);
                double l3 = this.Length(this.x1, this.y1, this.x3, this.y3);
                double a1 = this.Angle(l1, l2, l3);
                double a2 = this.Angle(l2, l3, l1);
                double a3 = this.Angle(l3, l1, l2);
                if (a1 == Math.PI / 2 || a2 == Math.PI / 2 || a3 == Math.PI / 2) return true;
                else return false;
            }
        }
    }
}
